//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MessangerClient.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/DatabaseModule")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Nullable<System.DateTime> CreationDateField;
        
        private string EmailField;
        
        private int IdField;
        
        private System.Nullable<System.DateTime> LastOnlineField;
        
        private string PasswordField;
        
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="CreationDate@", IsRequired=true)]
        public System.Nullable<System.DateTime> CreationDate {
            get {
                return this.CreationDateField;
            }
            set {
                if ((this.CreationDateField.Equals(value) != true)) {
                    this.CreationDateField = value;
                    this.RaisePropertyChanged("CreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="Email@", IsRequired=true)]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="Id@", IsRequired=true)]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="LastOnline@", IsRequired=true)]
        public System.Nullable<System.DateTime> LastOnline {
            get {
                return this.LastOnlineField;
            }
            set {
                if ((this.LastOnlineField.Equals(value) != true)) {
                    this.LastOnlineField = value;
                    this.RaisePropertyChanged("LastOnline");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="Password@", IsRequired=true)]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Name="Username@", IsRequired=true)]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResultCodes", Namespace="http://schemas.datacontract.org/2004/07/ClientModule")]
    public enum ResultCodes : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ServerConnectionLost = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IncorrectPassword = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IncorrectEmail = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        IncorrectUserName = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ServerError = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoMatching = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ElementIsAlreadyCreated = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ClientConnectionLost = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        InProccess = 9,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/ClientModule")]
    [System.SerializableAttribute()]
    public partial class User1 : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsOlineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastOnlineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsOline {
            get {
                return this.IsOlineField;
            }
            set {
                if ((this.IsOlineField.Equals(value) != true)) {
                    this.IsOlineField = value;
                    this.RaisePropertyChanged("IsOline");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastOnline {
            get {
                return this.LastOnlineField;
            }
            set {
                if ((this.LastOnlineField.Equals(value) != true)) {
                    this.LastOnlineField = value;
                    this.RaisePropertyChanged("LastOnline");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Message", Namespace="http://schemas.datacontract.org/2004/07/MessageModule")]
    [System.SerializableAttribute()]
    public partial class Message : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SendTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SendTime {
            get {
                return this.SendTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.SendTimeField, value) != true)) {
                    this.SendTimeField = value;
                    this.RaisePropertyChanged("SendTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IMSGService", CallbackContract=typeof(MessangerClient.ServiceReference.IMSGServiceCallback))]
    public interface IMSGService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/Registration", ReplyAction="http://tempuri.org/IMSGService/RegistrationResponse")]
        MessangerClient.ServiceReference.ResultCodes Registration(MessangerClient.ServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/Registration", ReplyAction="http://tempuri.org/IMSGService/RegistrationResponse")]
        System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> RegistrationAsync(MessangerClient.ServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/Login", ReplyAction="http://tempuri.org/IMSGService/LoginResponse")]
        MessangerClient.ServiceReference.LoginResponse Login(MessangerClient.ServiceReference.LoginRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/Login", ReplyAction="http://tempuri.org/IMSGService/LoginResponse")]
        System.Threading.Tasks.Task<MessangerClient.ServiceReference.LoginResponse> LoginAsync(MessangerClient.ServiceReference.LoginRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/SearchUserByUserName", ReplyAction="http://tempuri.org/IMSGService/SearchUserByUserNameResponse")]
        MessangerClient.ServiceReference.SearchUserByUserNameResponse SearchUserByUserName(MessangerClient.ServiceReference.SearchUserByUserNameRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/SearchUserByUserName", ReplyAction="http://tempuri.org/IMSGService/SearchUserByUserNameResponse")]
        System.Threading.Tasks.Task<MessangerClient.ServiceReference.SearchUserByUserNameResponse> SearchUserByUserNameAsync(MessangerClient.ServiceReference.SearchUserByUserNameRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/UploadUserAvatar", ReplyAction="http://tempuri.org/IMSGService/UploadUserAvatarResponse")]
        MessangerClient.ServiceReference.ResultCodes UploadUserAvatar(string username, byte[] img, bool isnew);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/UploadUserAvatar", ReplyAction="http://tempuri.org/IMSGService/UploadUserAvatarResponse")]
        System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> UploadUserAvatarAsync(string username, byte[] img, bool isnew);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/UploadGroupAvatar", ReplyAction="http://tempuri.org/IMSGService/UploadGroupAvatarResponse")]
        MessangerClient.ServiceReference.ResultCodes UploadGroupAvatar(string address, byte[] img, bool isnew);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/UploadGroupAvatar", ReplyAction="http://tempuri.org/IMSGService/UploadGroupAvatarResponse")]
        System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> UploadGroupAvatarAsync(string address, byte[] img, bool isnew);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/GetUserAvatar", ReplyAction="http://tempuri.org/IMSGService/GetUserAvatarResponse")]
        MessangerClient.ServiceReference.GetUserAvatarResponse GetUserAvatar(MessangerClient.ServiceReference.GetUserAvatarRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/GetUserAvatar", ReplyAction="http://tempuri.org/IMSGService/GetUserAvatarResponse")]
        System.Threading.Tasks.Task<MessangerClient.ServiceReference.GetUserAvatarResponse> GetUserAvatarAsync(MessangerClient.ServiceReference.GetUserAvatarRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/GetGroupAvatar", ReplyAction="http://tempuri.org/IMSGService/GetGroupAvatarResponse")]
        MessangerClient.ServiceReference.GetGroupAvatarResponse GetGroupAvatar(MessangerClient.ServiceReference.GetGroupAvatarRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/GetGroupAvatar", ReplyAction="http://tempuri.org/IMSGService/GetGroupAvatarResponse")]
        System.Threading.Tasks.Task<MessangerClient.ServiceReference.GetGroupAvatarResponse> GetGroupAvatarAsync(MessangerClient.ServiceReference.GetGroupAvatarRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/GetUserOnlineStatus", ReplyAction="http://tempuri.org/IMSGService/GetUserOnlineStatusResponse")]
        MessangerClient.ServiceReference.GetUserOnlineStatusResponse GetUserOnlineStatus(MessangerClient.ServiceReference.GetUserOnlineStatusRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/GetUserOnlineStatus", ReplyAction="http://tempuri.org/IMSGService/GetUserOnlineStatusResponse")]
        System.Threading.Tasks.Task<MessangerClient.ServiceReference.GetUserOnlineStatusResponse> GetUserOnlineStatusAsync(MessangerClient.ServiceReference.GetUserOnlineStatusRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/AddChat", ReplyAction="http://tempuri.org/IMSGService/AddChatResponse")]
        MessangerClient.ServiceReference.ResultCodes AddChat(string firstuser, string seconduser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/AddChat", ReplyAction="http://tempuri.org/IMSGService/AddChatResponse")]
        System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> AddChatAsync(string firstuser, string seconduser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/AddGroup", ReplyAction="http://tempuri.org/IMSGService/AddGroupResponse")]
        MessangerClient.ServiceReference.ResultCodes AddGroup(string groupname, string username, string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/AddGroup", ReplyAction="http://tempuri.org/IMSGService/AddGroupResponse")]
        System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> AddGroupAsync(string groupname, string username, string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/GetGroupUsersCount", ReplyAction="http://tempuri.org/IMSGService/GetGroupUsersCountResponse")]
        MessangerClient.ServiceReference.GetGroupUsersCountResponse GetGroupUsersCount(MessangerClient.ServiceReference.GetGroupUsersCountRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/GetGroupUsersCount", ReplyAction="http://tempuri.org/IMSGService/GetGroupUsersCountResponse")]
        System.Threading.Tasks.Task<MessangerClient.ServiceReference.GetGroupUsersCountResponse> GetGroupUsersCountAsync(MessangerClient.ServiceReference.GetGroupUsersCountRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/GetGroupInfo", ReplyAction="http://tempuri.org/IMSGService/GetGroupInfoResponse")]
        MessangerClient.ServiceReference.GetGroupInfoResponse GetGroupInfo(MessangerClient.ServiceReference.GetGroupInfoRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/GetGroupInfo", ReplyAction="http://tempuri.org/IMSGService/GetGroupInfoResponse")]
        System.Threading.Tasks.Task<MessangerClient.ServiceReference.GetGroupInfoResponse> GetGroupInfoAsync(MessangerClient.ServiceReference.GetGroupInfoRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/InviteToGroup", ReplyAction="http://tempuri.org/IMSGService/InviteToGroupResponse")]
        MessangerClient.ServiceReference.ResultCodes InviteToGroup(string address, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/InviteToGroup", ReplyAction="http://tempuri.org/IMSGService/InviteToGroupResponse")]
        System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> InviteToGroupAsync(string address, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/RemoveChannel", ReplyAction="http://tempuri.org/IMSGService/RemoveChannelResponse")]
        MessangerClient.ServiceReference.ResultCodes RemoveChannel(string username, string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/RemoveChannel", ReplyAction="http://tempuri.org/IMSGService/RemoveChannelResponse")]
        System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> RemoveChannelAsync(string username, string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/LeaveGroup", ReplyAction="http://tempuri.org/IMSGService/LeaveGroupResponse")]
        MessangerClient.ServiceReference.ResultCodes LeaveGroup(string username, string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/LeaveGroup", ReplyAction="http://tempuri.org/IMSGService/LeaveGroupResponse")]
        System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> LeaveGroupAsync(string username, string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/GetGroupUsers", ReplyAction="http://tempuri.org/IMSGService/GetGroupUsersResponse")]
        MessangerClient.ServiceReference.GetGroupUsersResponse GetGroupUsers(MessangerClient.ServiceReference.GetGroupUsersRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/GetGroupUsers", ReplyAction="http://tempuri.org/IMSGService/GetGroupUsersResponse")]
        System.Threading.Tasks.Task<MessangerClient.ServiceReference.GetGroupUsersResponse> GetGroupUsersAsync(MessangerClient.ServiceReference.GetGroupUsersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/RenameGroup", ReplyAction="http://tempuri.org/IMSGService/RenameGroupResponse")]
        MessangerClient.ServiceReference.ResultCodes RenameGroup(string address, string newname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/RenameGroup", ReplyAction="http://tempuri.org/IMSGService/RenameGroupResponse")]
        System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> RenameGroupAsync(string address, string newname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/StartCall", ReplyAction="http://tempuri.org/IMSGService/StartCallResponse")]
        MessangerClient.ServiceReference.ResultCodes StartCall(string username, string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/StartCall", ReplyAction="http://tempuri.org/IMSGService/StartCallResponse")]
        System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> StartCallAsync(string username, string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/GetCall", ReplyAction="http://tempuri.org/IMSGService/GetCallResponse")]
        MessangerClient.ServiceReference.GetCallResponse GetCall(MessangerClient.ServiceReference.GetCallRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/GetCall", ReplyAction="http://tempuri.org/IMSGService/GetCallResponse")]
        System.Threading.Tasks.Task<MessangerClient.ServiceReference.GetCallResponse> GetCallAsync(MessangerClient.ServiceReference.GetCallRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/StopCall", ReplyAction="http://tempuri.org/IMSGService/StopCallResponse")]
        MessangerClient.ServiceReference.ResultCodes StopCall(string username, string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/StopCall", ReplyAction="http://tempuri.org/IMSGService/StopCallResponse")]
        System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> StopCallAsync(string username, string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/SendAudio", ReplyAction="http://tempuri.org/IMSGService/SendAudioResponse")]
        MessangerClient.ServiceReference.ResultCodes SendAudio(string address, byte[] data, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/SendAudio", ReplyAction="http://tempuri.org/IMSGService/SendAudioResponse")]
        System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> SendAudioAsync(string address, byte[] data, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/SendImages", ReplyAction="http://tempuri.org/IMSGService/SendImagesResponse")]
        MessangerClient.ServiceReference.ResultCodes SendImages(string address, byte[] data, bool isend, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/SendImages", ReplyAction="http://tempuri.org/IMSGService/SendImagesResponse")]
        System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> SendImagesAsync(string address, byte[] data, bool isend, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/ConnectToCall", ReplyAction="http://tempuri.org/IMSGService/ConnectToCallResponse")]
        MessangerClient.ServiceReference.ResultCodes ConnectToCall(string username, string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/ConnectToCall", ReplyAction="http://tempuri.org/IMSGService/ConnectToCallResponse")]
        System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> ConnectToCallAsync(string username, string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/DisconnectFromCall", ReplyAction="http://tempuri.org/IMSGService/DisconnectFromCallResponse")]
        MessangerClient.ServiceReference.ResultCodes DisconnectFromCall(string username, string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/DisconnectFromCall", ReplyAction="http://tempuri.org/IMSGService/DisconnectFromCallResponse")]
        System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> DisconnectFromCallAsync(string username, string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/SendMessage", ReplyAction="http://tempuri.org/IMSGService/SendMessageResponse")]
        MessangerClient.ServiceReference.ResultCodes SendMessage(MessangerClient.ServiceReference.Message msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/SendMessage", ReplyAction="http://tempuri.org/IMSGService/SendMessageResponse")]
        System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> SendMessageAsync(MessangerClient.ServiceReference.Message msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/SendFile", ReplyAction="http://tempuri.org/IMSGService/SendFileResponse")]
        MessangerClient.ServiceReference.ResultCodes SendFile(string filename, string address, long position, byte[] file);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/SendFile", ReplyAction="http://tempuri.org/IMSGService/SendFileResponse")]
        System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> SendFileAsync(string filename, string address, long position, byte[] file);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/DownloadFile", ReplyAction="http://tempuri.org/IMSGService/DownloadFileResponse")]
        MessangerClient.ServiceReference.DownloadFileResponse DownloadFile(MessangerClient.ServiceReference.DownloadFileRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/DownloadFile", ReplyAction="http://tempuri.org/IMSGService/DownloadFileResponse")]
        System.Threading.Tasks.Task<MessangerClient.ServiceReference.DownloadFileResponse> DownloadFileAsync(MessangerClient.ServiceReference.DownloadFileRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/GetTotalNewMessages", ReplyAction="http://tempuri.org/IMSGService/GetTotalNewMessagesResponse")]
        MessangerClient.ServiceReference.GetTotalNewMessagesResponse GetTotalNewMessages(MessangerClient.ServiceReference.GetTotalNewMessagesRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/GetTotalNewMessages", ReplyAction="http://tempuri.org/IMSGService/GetTotalNewMessagesResponse")]
        System.Threading.Tasks.Task<MessangerClient.ServiceReference.GetTotalNewMessagesResponse> GetTotalNewMessagesAsync(MessangerClient.ServiceReference.GetTotalNewMessagesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/GetNewMessages", ReplyAction="http://tempuri.org/IMSGService/GetNewMessagesResponse")]
        MessangerClient.ServiceReference.ResultCodes GetNewMessages(string username, string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/GetNewMessages", ReplyAction="http://tempuri.org/IMSGService/GetNewMessagesResponse")]
        System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> GetNewMessagesAsync(string username, string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/GetInvites", ReplyAction="http://tempuri.org/IMSGService/GetInvitesResponse")]
        MessangerClient.ServiceReference.GetInvitesResponse GetInvites(MessangerClient.ServiceReference.GetInvitesRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/GetInvites", ReplyAction="http://tempuri.org/IMSGService/GetInvitesResponse")]
        System.Threading.Tasks.Task<MessangerClient.ServiceReference.GetInvitesResponse> GetInvitesAsync(MessangerClient.ServiceReference.GetInvitesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/SubscribeToUser", ReplyAction="http://tempuri.org/IMSGService/SubscribeToUserResponse")]
        MessangerClient.ServiceReference.ResultCodes SubscribeToUser(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/SubscribeToUser", ReplyAction="http://tempuri.org/IMSGService/SubscribeToUserResponse")]
        System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> SubscribeToUserAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMSGService/Disconnect")]
        void Disconnect(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMSGService/Disconnect")]
        System.Threading.Tasks.Task DisconnectAsync(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMSGServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMSGService/ReceiveMessage")]
        void ReceiveMessage(MessangerClient.ServiceReference.Message msg);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMSGService/HasConnectionToClient", ReplyAction="http://tempuri.org/IMSGService/HasConnectionToClientResponse")]
        MessangerClient.ServiceReference.ResultCodes HasConnectionToClient();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMSGService/ReceiveAudio")]
        void ReceiveAudio(byte[] data);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMSGService/ReceiveImage")]
        void ReceiveImage(byte[] data, bool isend);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Login", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class LoginRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string email;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string password;
        
        public LoginRequest() {
        }
        
        public LoginRequest(string email, string password) {
            this.email = email;
            this.password = password;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="LoginResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class LoginResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public MessangerClient.ServiceReference.ResultCodes LoginResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public MessangerClient.ServiceReference.User1 user;
        
        public LoginResponse() {
        }
        
        public LoginResponse(MessangerClient.ServiceReference.ResultCodes LoginResult, MessangerClient.ServiceReference.User1 user) {
            this.LoginResult = LoginResult;
            this.user = user;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SearchUserByUserName", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class SearchUserByUserNameRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string username;
        
        public SearchUserByUserNameRequest() {
        }
        
        public SearchUserByUserNameRequest(string username) {
            this.username = username;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="SearchUserByUserNameResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class SearchUserByUserNameResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public MessangerClient.ServiceReference.ResultCodes SearchUserByUserNameResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public MessangerClient.ServiceReference.User1 user;
        
        public SearchUserByUserNameResponse() {
        }
        
        public SearchUserByUserNameResponse(MessangerClient.ServiceReference.ResultCodes SearchUserByUserNameResult, MessangerClient.ServiceReference.User1 user) {
            this.SearchUserByUserNameResult = SearchUserByUserNameResult;
            this.user = user;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetUserAvatar", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetUserAvatarRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string username;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public long position;
        
        public GetUserAvatarRequest() {
        }
        
        public GetUserAvatarRequest(string username, long position) {
            this.username = username;
            this.position = position;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetUserAvatarResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetUserAvatarResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public MessangerClient.ServiceReference.ResultCodes GetUserAvatarResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public byte[] img;
        
        public GetUserAvatarResponse() {
        }
        
        public GetUserAvatarResponse(MessangerClient.ServiceReference.ResultCodes GetUserAvatarResult, byte[] img) {
            this.GetUserAvatarResult = GetUserAvatarResult;
            this.img = img;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetGroupAvatar", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetGroupAvatarRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string address;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public long position;
        
        public GetGroupAvatarRequest() {
        }
        
        public GetGroupAvatarRequest(string address, long position) {
            this.address = address;
            this.position = position;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetGroupAvatarResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetGroupAvatarResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public MessangerClient.ServiceReference.ResultCodes GetGroupAvatarResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public byte[] img;
        
        public GetGroupAvatarResponse() {
        }
        
        public GetGroupAvatarResponse(MessangerClient.ServiceReference.ResultCodes GetGroupAvatarResult, byte[] img) {
            this.GetGroupAvatarResult = GetGroupAvatarResult;
            this.img = img;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetUserOnlineStatus", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetUserOnlineStatusRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string username;
        
        public GetUserOnlineStatusRequest() {
        }
        
        public GetUserOnlineStatusRequest(string username) {
            this.username = username;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetUserOnlineStatusResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetUserOnlineStatusResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public MessangerClient.ServiceReference.ResultCodes GetUserOnlineStatusResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public bool isonline;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public System.Nullable<System.DateTime> dateTime;
        
        public GetUserOnlineStatusResponse() {
        }
        
        public GetUserOnlineStatusResponse(MessangerClient.ServiceReference.ResultCodes GetUserOnlineStatusResult, bool isonline, System.Nullable<System.DateTime> dateTime) {
            this.GetUserOnlineStatusResult = GetUserOnlineStatusResult;
            this.isonline = isonline;
            this.dateTime = dateTime;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetGroupUsersCount", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetGroupUsersCountRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string address;
        
        public GetGroupUsersCountRequest() {
        }
        
        public GetGroupUsersCountRequest(string address) {
            this.address = address;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetGroupUsersCountResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetGroupUsersCountResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public MessangerClient.ServiceReference.ResultCodes GetGroupUsersCountResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int count;
        
        public GetGroupUsersCountResponse() {
        }
        
        public GetGroupUsersCountResponse(MessangerClient.ServiceReference.ResultCodes GetGroupUsersCountResult, int count) {
            this.GetGroupUsersCountResult = GetGroupUsersCountResult;
            this.count = count;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetGroupInfo", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetGroupInfoRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string address;
        
        public GetGroupInfoRequest() {
        }
        
        public GetGroupInfoRequest(string address) {
            this.address = address;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetGroupInfoResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetGroupInfoResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public MessangerClient.ServiceReference.ResultCodes GetGroupInfoResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string admin;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string groupname;
        
        public GetGroupInfoResponse() {
        }
        
        public GetGroupInfoResponse(MessangerClient.ServiceReference.ResultCodes GetGroupInfoResult, string admin, string groupname) {
            this.GetGroupInfoResult = GetGroupInfoResult;
            this.admin = admin;
            this.groupname = groupname;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetGroupUsers", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetGroupUsersRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string address;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string lastname;
        
        public GetGroupUsersRequest() {
        }
        
        public GetGroupUsersRequest(string address, string lastname) {
            this.address = address;
            this.lastname = lastname;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetGroupUsersResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetGroupUsersResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public MessangerClient.ServiceReference.ResultCodes GetGroupUsersResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int count;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string[] user;
        
        public GetGroupUsersResponse() {
        }
        
        public GetGroupUsersResponse(MessangerClient.ServiceReference.ResultCodes GetGroupUsersResult, int count, string[] user) {
            this.GetGroupUsersResult = GetGroupUsersResult;
            this.count = count;
            this.user = user;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCall", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetCallRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string address;
        
        public GetCallRequest() {
        }
        
        public GetCallRequest(string address) {
            this.address = address;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCallResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetCallResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public MessangerClient.ServiceReference.ResultCodes GetCallResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public bool isstreaming;
        
        public GetCallResponse() {
        }
        
        public GetCallResponse(MessangerClient.ServiceReference.ResultCodes GetCallResult, bool isstreaming) {
            this.GetCallResult = GetCallResult;
            this.isstreaming = isstreaming;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadFile", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadFileRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string filename;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string address;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public long position;
        
        public DownloadFileRequest() {
        }
        
        public DownloadFileRequest(string filename, string address, long position) {
            this.filename = filename;
            this.address = address;
            this.position = position;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadFileResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadFileResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public MessangerClient.ServiceReference.ResultCodes DownloadFileResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public byte[] file;
        
        public DownloadFileResponse() {
        }
        
        public DownloadFileResponse(MessangerClient.ServiceReference.ResultCodes DownloadFileResult, byte[] file) {
            this.DownloadFileResult = DownloadFileResult;
            this.file = file;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetTotalNewMessages", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetTotalNewMessagesRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string user;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string address;
        
        public GetTotalNewMessagesRequest() {
        }
        
        public GetTotalNewMessagesRequest(string user, string address) {
            this.user = user;
            this.address = address;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetTotalNewMessagesResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetTotalNewMessagesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public MessangerClient.ServiceReference.ResultCodes GetTotalNewMessagesResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public long total;
        
        public GetTotalNewMessagesResponse() {
        }
        
        public GetTotalNewMessagesResponse(MessangerClient.ServiceReference.ResultCodes GetTotalNewMessagesResult, long total) {
            this.GetTotalNewMessagesResult = GetTotalNewMessagesResult;
            this.total = total;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetInvites", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetInvitesRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string username;
        
        public GetInvitesRequest() {
        }
        
        public GetInvitesRequest(string username) {
            this.username = username;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetInvitesResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetInvitesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public MessangerClient.ServiceReference.ResultCodes GetInvitesResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string[] address;
        
        public GetInvitesResponse() {
        }
        
        public GetInvitesResponse(MessangerClient.ServiceReference.ResultCodes GetInvitesResult, string[] address) {
            this.GetInvitesResult = GetInvitesResult;
            this.address = address;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMSGServiceChannel : MessangerClient.ServiceReference.IMSGService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MSGServiceClient : System.ServiceModel.DuplexClientBase<MessangerClient.ServiceReference.IMSGService>, MessangerClient.ServiceReference.IMSGService {
        
        public MSGServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MSGServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MSGServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MSGServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MSGServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public MessangerClient.ServiceReference.ResultCodes Registration(MessangerClient.ServiceReference.User user) {
            return base.Channel.Registration(user);
        }
        
        public System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> RegistrationAsync(MessangerClient.ServiceReference.User user) {
            return base.Channel.RegistrationAsync(user);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MessangerClient.ServiceReference.LoginResponse MessangerClient.ServiceReference.IMSGService.Login(MessangerClient.ServiceReference.LoginRequest request) {
            return base.Channel.Login(request);
        }
        
        public MessangerClient.ServiceReference.ResultCodes Login(string email, string password, out MessangerClient.ServiceReference.User1 user) {
            MessangerClient.ServiceReference.LoginRequest inValue = new MessangerClient.ServiceReference.LoginRequest();
            inValue.email = email;
            inValue.password = password;
            MessangerClient.ServiceReference.LoginResponse retVal = ((MessangerClient.ServiceReference.IMSGService)(this)).Login(inValue);
            user = retVal.user;
            return retVal.LoginResult;
        }
        
        public System.Threading.Tasks.Task<MessangerClient.ServiceReference.LoginResponse> LoginAsync(MessangerClient.ServiceReference.LoginRequest request) {
            return base.Channel.LoginAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MessangerClient.ServiceReference.SearchUserByUserNameResponse MessangerClient.ServiceReference.IMSGService.SearchUserByUserName(MessangerClient.ServiceReference.SearchUserByUserNameRequest request) {
            return base.Channel.SearchUserByUserName(request);
        }
        
        public MessangerClient.ServiceReference.ResultCodes SearchUserByUserName(string username, out MessangerClient.ServiceReference.User1 user) {
            MessangerClient.ServiceReference.SearchUserByUserNameRequest inValue = new MessangerClient.ServiceReference.SearchUserByUserNameRequest();
            inValue.username = username;
            MessangerClient.ServiceReference.SearchUserByUserNameResponse retVal = ((MessangerClient.ServiceReference.IMSGService)(this)).SearchUserByUserName(inValue);
            user = retVal.user;
            return retVal.SearchUserByUserNameResult;
        }
        
        public System.Threading.Tasks.Task<MessangerClient.ServiceReference.SearchUserByUserNameResponse> SearchUserByUserNameAsync(MessangerClient.ServiceReference.SearchUserByUserNameRequest request) {
            return base.Channel.SearchUserByUserNameAsync(request);
        }
        
        public MessangerClient.ServiceReference.ResultCodes UploadUserAvatar(string username, byte[] img, bool isnew) {
            return base.Channel.UploadUserAvatar(username, img, isnew);
        }
        
        public System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> UploadUserAvatarAsync(string username, byte[] img, bool isnew) {
            return base.Channel.UploadUserAvatarAsync(username, img, isnew);
        }
        
        public MessangerClient.ServiceReference.ResultCodes UploadGroupAvatar(string address, byte[] img, bool isnew) {
            return base.Channel.UploadGroupAvatar(address, img, isnew);
        }
        
        public System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> UploadGroupAvatarAsync(string address, byte[] img, bool isnew) {
            return base.Channel.UploadGroupAvatarAsync(address, img, isnew);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MessangerClient.ServiceReference.GetUserAvatarResponse MessangerClient.ServiceReference.IMSGService.GetUserAvatar(MessangerClient.ServiceReference.GetUserAvatarRequest request) {
            return base.Channel.GetUserAvatar(request);
        }
        
        public MessangerClient.ServiceReference.ResultCodes GetUserAvatar(string username, long position, out byte[] img) {
            MessangerClient.ServiceReference.GetUserAvatarRequest inValue = new MessangerClient.ServiceReference.GetUserAvatarRequest();
            inValue.username = username;
            inValue.position = position;
            MessangerClient.ServiceReference.GetUserAvatarResponse retVal = ((MessangerClient.ServiceReference.IMSGService)(this)).GetUserAvatar(inValue);
            img = retVal.img;
            return retVal.GetUserAvatarResult;
        }
        
        public System.Threading.Tasks.Task<MessangerClient.ServiceReference.GetUserAvatarResponse> GetUserAvatarAsync(MessangerClient.ServiceReference.GetUserAvatarRequest request) {
            return base.Channel.GetUserAvatarAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MessangerClient.ServiceReference.GetGroupAvatarResponse MessangerClient.ServiceReference.IMSGService.GetGroupAvatar(MessangerClient.ServiceReference.GetGroupAvatarRequest request) {
            return base.Channel.GetGroupAvatar(request);
        }
        
        public MessangerClient.ServiceReference.ResultCodes GetGroupAvatar(string address, long position, out byte[] img) {
            MessangerClient.ServiceReference.GetGroupAvatarRequest inValue = new MessangerClient.ServiceReference.GetGroupAvatarRequest();
            inValue.address = address;
            inValue.position = position;
            MessangerClient.ServiceReference.GetGroupAvatarResponse retVal = ((MessangerClient.ServiceReference.IMSGService)(this)).GetGroupAvatar(inValue);
            img = retVal.img;
            return retVal.GetGroupAvatarResult;
        }
        
        public System.Threading.Tasks.Task<MessangerClient.ServiceReference.GetGroupAvatarResponse> GetGroupAvatarAsync(MessangerClient.ServiceReference.GetGroupAvatarRequest request) {
            return base.Channel.GetGroupAvatarAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MessangerClient.ServiceReference.GetUserOnlineStatusResponse MessangerClient.ServiceReference.IMSGService.GetUserOnlineStatus(MessangerClient.ServiceReference.GetUserOnlineStatusRequest request) {
            return base.Channel.GetUserOnlineStatus(request);
        }
        
        public MessangerClient.ServiceReference.ResultCodes GetUserOnlineStatus(string username, out bool isonline, out System.Nullable<System.DateTime> dateTime) {
            MessangerClient.ServiceReference.GetUserOnlineStatusRequest inValue = new MessangerClient.ServiceReference.GetUserOnlineStatusRequest();
            inValue.username = username;
            MessangerClient.ServiceReference.GetUserOnlineStatusResponse retVal = ((MessangerClient.ServiceReference.IMSGService)(this)).GetUserOnlineStatus(inValue);
            isonline = retVal.isonline;
            dateTime = retVal.dateTime;
            return retVal.GetUserOnlineStatusResult;
        }
        
        public System.Threading.Tasks.Task<MessangerClient.ServiceReference.GetUserOnlineStatusResponse> GetUserOnlineStatusAsync(MessangerClient.ServiceReference.GetUserOnlineStatusRequest request) {
            return base.Channel.GetUserOnlineStatusAsync(request);
        }
        
        public MessangerClient.ServiceReference.ResultCodes AddChat(string firstuser, string seconduser) {
            return base.Channel.AddChat(firstuser, seconduser);
        }
        
        public System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> AddChatAsync(string firstuser, string seconduser) {
            return base.Channel.AddChatAsync(firstuser, seconduser);
        }
        
        public MessangerClient.ServiceReference.ResultCodes AddGroup(string groupname, string username, string address) {
            return base.Channel.AddGroup(groupname, username, address);
        }
        
        public System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> AddGroupAsync(string groupname, string username, string address) {
            return base.Channel.AddGroupAsync(groupname, username, address);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MessangerClient.ServiceReference.GetGroupUsersCountResponse MessangerClient.ServiceReference.IMSGService.GetGroupUsersCount(MessangerClient.ServiceReference.GetGroupUsersCountRequest request) {
            return base.Channel.GetGroupUsersCount(request);
        }
        
        public MessangerClient.ServiceReference.ResultCodes GetGroupUsersCount(string address, out int count) {
            MessangerClient.ServiceReference.GetGroupUsersCountRequest inValue = new MessangerClient.ServiceReference.GetGroupUsersCountRequest();
            inValue.address = address;
            MessangerClient.ServiceReference.GetGroupUsersCountResponse retVal = ((MessangerClient.ServiceReference.IMSGService)(this)).GetGroupUsersCount(inValue);
            count = retVal.count;
            return retVal.GetGroupUsersCountResult;
        }
        
        public System.Threading.Tasks.Task<MessangerClient.ServiceReference.GetGroupUsersCountResponse> GetGroupUsersCountAsync(MessangerClient.ServiceReference.GetGroupUsersCountRequest request) {
            return base.Channel.GetGroupUsersCountAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MessangerClient.ServiceReference.GetGroupInfoResponse MessangerClient.ServiceReference.IMSGService.GetGroupInfo(MessangerClient.ServiceReference.GetGroupInfoRequest request) {
            return base.Channel.GetGroupInfo(request);
        }
        
        public MessangerClient.ServiceReference.ResultCodes GetGroupInfo(string address, out string admin, out string groupname) {
            MessangerClient.ServiceReference.GetGroupInfoRequest inValue = new MessangerClient.ServiceReference.GetGroupInfoRequest();
            inValue.address = address;
            MessangerClient.ServiceReference.GetGroupInfoResponse retVal = ((MessangerClient.ServiceReference.IMSGService)(this)).GetGroupInfo(inValue);
            admin = retVal.admin;
            groupname = retVal.groupname;
            return retVal.GetGroupInfoResult;
        }
        
        public System.Threading.Tasks.Task<MessangerClient.ServiceReference.GetGroupInfoResponse> GetGroupInfoAsync(MessangerClient.ServiceReference.GetGroupInfoRequest request) {
            return base.Channel.GetGroupInfoAsync(request);
        }
        
        public MessangerClient.ServiceReference.ResultCodes InviteToGroup(string address, string username) {
            return base.Channel.InviteToGroup(address, username);
        }
        
        public System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> InviteToGroupAsync(string address, string username) {
            return base.Channel.InviteToGroupAsync(address, username);
        }
        
        public MessangerClient.ServiceReference.ResultCodes RemoveChannel(string username, string address) {
            return base.Channel.RemoveChannel(username, address);
        }
        
        public System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> RemoveChannelAsync(string username, string address) {
            return base.Channel.RemoveChannelAsync(username, address);
        }
        
        public MessangerClient.ServiceReference.ResultCodes LeaveGroup(string username, string address) {
            return base.Channel.LeaveGroup(username, address);
        }
        
        public System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> LeaveGroupAsync(string username, string address) {
            return base.Channel.LeaveGroupAsync(username, address);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MessangerClient.ServiceReference.GetGroupUsersResponse MessangerClient.ServiceReference.IMSGService.GetGroupUsers(MessangerClient.ServiceReference.GetGroupUsersRequest request) {
            return base.Channel.GetGroupUsers(request);
        }
        
        public MessangerClient.ServiceReference.ResultCodes GetGroupUsers(string address, string lastname, out int count, out string[] user) {
            MessangerClient.ServiceReference.GetGroupUsersRequest inValue = new MessangerClient.ServiceReference.GetGroupUsersRequest();
            inValue.address = address;
            inValue.lastname = lastname;
            MessangerClient.ServiceReference.GetGroupUsersResponse retVal = ((MessangerClient.ServiceReference.IMSGService)(this)).GetGroupUsers(inValue);
            count = retVal.count;
            user = retVal.user;
            return retVal.GetGroupUsersResult;
        }
        
        public System.Threading.Tasks.Task<MessangerClient.ServiceReference.GetGroupUsersResponse> GetGroupUsersAsync(MessangerClient.ServiceReference.GetGroupUsersRequest request) {
            return base.Channel.GetGroupUsersAsync(request);
        }
        
        public MessangerClient.ServiceReference.ResultCodes RenameGroup(string address, string newname) {
            return base.Channel.RenameGroup(address, newname);
        }
        
        public System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> RenameGroupAsync(string address, string newname) {
            return base.Channel.RenameGroupAsync(address, newname);
        }
        
        public MessangerClient.ServiceReference.ResultCodes StartCall(string username, string address) {
            return base.Channel.StartCall(username, address);
        }
        
        public System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> StartCallAsync(string username, string address) {
            return base.Channel.StartCallAsync(username, address);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MessangerClient.ServiceReference.GetCallResponse MessangerClient.ServiceReference.IMSGService.GetCall(MessangerClient.ServiceReference.GetCallRequest request) {
            return base.Channel.GetCall(request);
        }
        
        public MessangerClient.ServiceReference.ResultCodes GetCall(string address, out bool isstreaming) {
            MessangerClient.ServiceReference.GetCallRequest inValue = new MessangerClient.ServiceReference.GetCallRequest();
            inValue.address = address;
            MessangerClient.ServiceReference.GetCallResponse retVal = ((MessangerClient.ServiceReference.IMSGService)(this)).GetCall(inValue);
            isstreaming = retVal.isstreaming;
            return retVal.GetCallResult;
        }
        
        public System.Threading.Tasks.Task<MessangerClient.ServiceReference.GetCallResponse> GetCallAsync(MessangerClient.ServiceReference.GetCallRequest request) {
            return base.Channel.GetCallAsync(request);
        }
        
        public MessangerClient.ServiceReference.ResultCodes StopCall(string username, string address) {
            return base.Channel.StopCall(username, address);
        }
        
        public System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> StopCallAsync(string username, string address) {
            return base.Channel.StopCallAsync(username, address);
        }
        
        public MessangerClient.ServiceReference.ResultCodes SendAudio(string address, byte[] data, string username) {
            return base.Channel.SendAudio(address, data, username);
        }
        
        public System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> SendAudioAsync(string address, byte[] data, string username) {
            return base.Channel.SendAudioAsync(address, data, username);
        }
        
        public MessangerClient.ServiceReference.ResultCodes SendImages(string address, byte[] data, bool isend, string name) {
            return base.Channel.SendImages(address, data, isend, name);
        }
        
        public System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> SendImagesAsync(string address, byte[] data, bool isend, string name) {
            return base.Channel.SendImagesAsync(address, data, isend, name);
        }
        
        public MessangerClient.ServiceReference.ResultCodes ConnectToCall(string username, string address) {
            return base.Channel.ConnectToCall(username, address);
        }
        
        public System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> ConnectToCallAsync(string username, string address) {
            return base.Channel.ConnectToCallAsync(username, address);
        }
        
        public MessangerClient.ServiceReference.ResultCodes DisconnectFromCall(string username, string address) {
            return base.Channel.DisconnectFromCall(username, address);
        }
        
        public System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> DisconnectFromCallAsync(string username, string address) {
            return base.Channel.DisconnectFromCallAsync(username, address);
        }
        
        public MessangerClient.ServiceReference.ResultCodes SendMessage(MessangerClient.ServiceReference.Message msg) {
            return base.Channel.SendMessage(msg);
        }
        
        public System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> SendMessageAsync(MessangerClient.ServiceReference.Message msg) {
            return base.Channel.SendMessageAsync(msg);
        }
        
        public MessangerClient.ServiceReference.ResultCodes SendFile(string filename, string address, long position, byte[] file) {
            return base.Channel.SendFile(filename, address, position, file);
        }
        
        public System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> SendFileAsync(string filename, string address, long position, byte[] file) {
            return base.Channel.SendFileAsync(filename, address, position, file);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MessangerClient.ServiceReference.DownloadFileResponse MessangerClient.ServiceReference.IMSGService.DownloadFile(MessangerClient.ServiceReference.DownloadFileRequest request) {
            return base.Channel.DownloadFile(request);
        }
        
        public MessangerClient.ServiceReference.ResultCodes DownloadFile(string filename, string address, long position, out byte[] file) {
            MessangerClient.ServiceReference.DownloadFileRequest inValue = new MessangerClient.ServiceReference.DownloadFileRequest();
            inValue.filename = filename;
            inValue.address = address;
            inValue.position = position;
            MessangerClient.ServiceReference.DownloadFileResponse retVal = ((MessangerClient.ServiceReference.IMSGService)(this)).DownloadFile(inValue);
            file = retVal.file;
            return retVal.DownloadFileResult;
        }
        
        public System.Threading.Tasks.Task<MessangerClient.ServiceReference.DownloadFileResponse> DownloadFileAsync(MessangerClient.ServiceReference.DownloadFileRequest request) {
            return base.Channel.DownloadFileAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MessangerClient.ServiceReference.GetTotalNewMessagesResponse MessangerClient.ServiceReference.IMSGService.GetTotalNewMessages(MessangerClient.ServiceReference.GetTotalNewMessagesRequest request) {
            return base.Channel.GetTotalNewMessages(request);
        }
        
        public MessangerClient.ServiceReference.ResultCodes GetTotalNewMessages(string user, string address, out long total) {
            MessangerClient.ServiceReference.GetTotalNewMessagesRequest inValue = new MessangerClient.ServiceReference.GetTotalNewMessagesRequest();
            inValue.user = user;
            inValue.address = address;
            MessangerClient.ServiceReference.GetTotalNewMessagesResponse retVal = ((MessangerClient.ServiceReference.IMSGService)(this)).GetTotalNewMessages(inValue);
            total = retVal.total;
            return retVal.GetTotalNewMessagesResult;
        }
        
        public System.Threading.Tasks.Task<MessangerClient.ServiceReference.GetTotalNewMessagesResponse> GetTotalNewMessagesAsync(MessangerClient.ServiceReference.GetTotalNewMessagesRequest request) {
            return base.Channel.GetTotalNewMessagesAsync(request);
        }
        
        public MessangerClient.ServiceReference.ResultCodes GetNewMessages(string username, string address) {
            return base.Channel.GetNewMessages(username, address);
        }
        
        public System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> GetNewMessagesAsync(string username, string address) {
            return base.Channel.GetNewMessagesAsync(username, address);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        MessangerClient.ServiceReference.GetInvitesResponse MessangerClient.ServiceReference.IMSGService.GetInvites(MessangerClient.ServiceReference.GetInvitesRequest request) {
            return base.Channel.GetInvites(request);
        }
        
        public MessangerClient.ServiceReference.ResultCodes GetInvites(string username, out string[] address) {
            MessangerClient.ServiceReference.GetInvitesRequest inValue = new MessangerClient.ServiceReference.GetInvitesRequest();
            inValue.username = username;
            MessangerClient.ServiceReference.GetInvitesResponse retVal = ((MessangerClient.ServiceReference.IMSGService)(this)).GetInvites(inValue);
            address = retVal.address;
            return retVal.GetInvitesResult;
        }
        
        public System.Threading.Tasks.Task<MessangerClient.ServiceReference.GetInvitesResponse> GetInvitesAsync(MessangerClient.ServiceReference.GetInvitesRequest request) {
            return base.Channel.GetInvitesAsync(request);
        }
        
        public MessangerClient.ServiceReference.ResultCodes SubscribeToUser(string username) {
            return base.Channel.SubscribeToUser(username);
        }
        
        public System.Threading.Tasks.Task<MessangerClient.ServiceReference.ResultCodes> SubscribeToUserAsync(string username) {
            return base.Channel.SubscribeToUserAsync(username);
        }
        
        public void Disconnect(string username) {
            base.Channel.Disconnect(username);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(string username) {
            return base.Channel.DisconnectAsync(username);
        }
    }
}
